{"version":3,"file":"319.js","mappings":"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","sources":["webpack://sleact-ts-front/./hooks/useInput.ts","webpack://sleact-ts-front/./pages/SignUp/index.tsx","webpack://sleact-ts-front/./pages/SignUp/styles.tsx","webpack://sleact-ts-front/./utils/fetcher.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState, ChangeEvent } from 'react';\r\n\r\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\r\n\r\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\r\n  const [value, setValue] = useState(initialData);\r\n  const handler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value as unknown as T);\r\n  }, []);\r\n  return [value, handler, setValue];\r\n};\r\n\r\nexport default useInput;\r\n","import useInput from '@hooks/useInput';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { useCallback, useState, VFC } from 'react';\r\nimport axios from 'axios';\r\nimport useSWR from 'swr';\r\nimport { Success, Form, Error, Label, Input, LinkContainer, Button, Header } from './styles';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nconst SignUp = () => {\r\n  const { data, error } = useSWR('/api/users', fetcher);\r\n\r\n  const [email, onChangeEmail] = useInput('');\r\n  const [nickname, onChangeNickname] = useInput('');\r\n  const [password, , setPassword] = useInput('');\r\n  const [passwordCheck, , setPasswordCheck] = useInput('');\r\n  const [mismatchError, setMismatchError] = useState(false);\r\n  const [signUpError, setSignUpError] = useState('');\r\n  const [signUpSuccess, setSignUpSuccess] = useState(false);\r\n\r\n  const onChangePassword = useCallback(\r\n    (e) => {\r\n      setPassword(e.target.value);\r\n      setMismatchError(e.target.value !== passwordCheck);\r\n    },\r\n    [passwordCheck],\r\n  );\r\n\r\n  const onChangePasswordCheck = useCallback(\r\n    (e) => {\r\n      setPasswordCheck(e.target.value);\r\n      setMismatchError(e.target.value !== password);\r\n    },\r\n    [password],\r\n  );\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!mismatchError && nickname) {\r\n        console.log('서버로 회원가입하기');\r\n        setSignUpError('');\r\n        setSignUpSuccess(false);\r\n        axios\r\n          .post('/api/users', {\r\n            email,\r\n            nickname,\r\n            password,\r\n          })\r\n          .then((response) => {\r\n            console.log(response);\r\n            setSignUpSuccess(true);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error.response);\r\n            setSignUpError(error.response.data);\r\n          })\r\n          .finally(() => {});\r\n      }\r\n    },\r\n    [email, nickname, password, passwordCheck, mismatchError],\r\n  );\r\n\r\n  if (data === undefined) {\r\n    return <div>로딩중...</div>;\r\n  }\r\n\r\n  if (data) {\r\n    return <Redirect to=\"/workspace/sleact/channel/일반\" />;\r\n  }\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <Header>Sleact</Header>\r\n      <Form onSubmit={onSubmit}>\r\n        <Label id=\"email-label\">\r\n          <span>이메일 주소</span>\r\n          <div>\r\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\r\n          </div>\r\n        </Label>\r\n        <Label id=\"nickname-label\">\r\n          <span>닉네임</span>\r\n          <div>\r\n            <Input type=\"text\" id=\"nickname\" name=\"nickname\" value={nickname} onChange={onChangeNickname} />\r\n          </div>\r\n        </Label>\r\n        <Label id=\"password-label\">\r\n          <span>비밀번호</span>\r\n          <div>\r\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\r\n          </div>\r\n        </Label>\r\n        <Label id=\"password-check-label\">\r\n          <span>비밀번호 확인</span>\r\n          <div>\r\n            <Input\r\n              type=\"password\"\r\n              id=\"password-check\"\r\n              name=\"password-check\"\r\n              value={passwordCheck}\r\n              onChange={onChangePasswordCheck}\r\n            />\r\n          </div>\r\n          {mismatchError && <Error>비밀번호가 일치하지 않습니다.</Error>}\r\n          {!nickname && <Error>닉네임을 입력해주세요.</Error>}\r\n          {signUpError && <Error>{signUpError}</Error>}\r\n          {signUpSuccess && <Success>회원가입되었습니다! 로그인해주세요.</Success>}\r\n        </Label>\r\n        <Button type=\"submit\">회원가입</Button>\r\n      </Form>\r\n      <LinkContainer>\r\n        이미 회원이신가요?&nbsp;\r\n        <Link to=\"/login\">로그인 하러가기</Link>\r\n        {/* a태그 사용하면 화면 전환 시 새로고침 현상이 나타남 -> 그래서 Link 사용 */}\r\n      </LinkContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Header = styled.header`\r\n  text-align: center;\r\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\r\n  font-weight: 700;\r\n  font-size: 48px;\r\n  line-height: 46px;\r\n  letter-spacing: -0.75px;\r\n  margin-top: 50px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  margin: 0 auto;\r\n  width: 400px;\r\n  max-width: 400px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 16px;\r\n  & > span {\r\n    display: block;\r\n    text-align: left;\r\n    padding-bottom: 8px;\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    line-height: 1.46666667;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  border-radius: 4px;\r\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\r\n  border: 1px solid var(--saf-0);\r\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px;\r\n  width: 100%;\r\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\r\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\r\n  padding: 12px;\r\n  height: 44px;\r\n  padding-top: 11px;\r\n  padding-bottom: 13px;\r\n  font-size: 18px;\r\n  line-height: 1.33333333;\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-bottom: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  color: #fff;\r\n  background-color: #4a154b;\r\n  border: none;\r\n  font-size: 18px;\r\n  font-weight: 900;\r\n  height: 44px;\r\n  min-width: 96px;\r\n  padding: 0 16px 3px;\r\n  transition: all 80ms linear;\r\n  user-select: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\r\n  &:hover {\r\n    background-color: rgba(74, 21, 75, 0.9);\r\n    border: none;\r\n  }\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Error = styled.div`\r\n  color: #e01e5a;\r\n  margin: 8px 0 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const Success = styled.div`\r\n  color: #2eb67d;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const LinkContainer = styled.p`\r\n  font-size: 13px;\r\n  color: #616061;\r\n  margin: 0 auto 8px;\r\n  width: 400px;\r\n  max-width: 400px;\r\n  & a {\r\n    color: #1264a3;\r\n    text-decoration: none;\r\n    font-weight: 700;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst fetcher = (url: string) =>\r\n  axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n    })\r\n    .then((response) => response.data); // fetcher를 활용하여 서버에서 받아 온 데이터를 가공하여 사용할 수 있다.\r\n\r\nexport default fetcher;\r\n"],"names":["initialData","_useState2","useState","value","setValue","useCallback","e","target","_useSWR","useSWR","fetcher","data","_useInput2","error","_slicedToArray","useInput","email","onChangeEmail","_useInput4","nickname","onChangeNickname","_useInput6","password","setPassword","_useInput8","passwordCheck","setPasswordCheck","mismatchError","setMismatchError","_useState4","signUpError","setSignUpError","_useState6","signUpSuccess","setSignUpSuccess","onChangePassword","onChangePasswordCheck","onSubmit","preventDefault","console","log","axios","then","response","catch","finally","undefined","React","Redirect","to","id","Header","Form","Label","Input","type","name","onChange","Error","Success","Button","LinkContainer","Link","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","url","withCredentials"],"sourceRoot":""}