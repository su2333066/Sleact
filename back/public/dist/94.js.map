{"version":3,"file":"94.js","mappings":"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","sources":["webpack://sleact-ts-front/./components/ChatBox/styles.tsx","webpack://sleact-ts-front/./components/ChatBox/index.tsx","webpack://sleact-ts-front/./components/Chat/styles.tsx","webpack://sleact-ts-front/./components/Chat/index.tsx","webpack://sleact-ts-front/./components/ChatList/styles.tsx","webpack://sleact-ts-front/./components/ChatList/index.tsx","webpack://sleact-ts-front/./pages/DirectMessage/styles.tsx","webpack://sleact-ts-front/./pages/DirectMessage/index.tsx","webpack://sleact-ts-front/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { MentionsInput } from 'react-mentions';\r\n\r\nexport const ChatArea = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 20px;\r\n  padding-top: 0;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  color: rgb(29, 28, 29);\r\n  font-size: 15px;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: 1px solid rgb(29, 28, 29);\r\n`;\r\n\r\nexport const MentionsTextarea = styled(MentionsInput)`\r\n  font-family: Slack-Lato, appleLogo, sans-serif;\r\n  font-size: 15px;\r\n  padding: 8px 9px;\r\n  width: 100%;\r\n  & strong {\r\n    background: skyblue;\r\n  }\r\n  & textarea {\r\n    height: 44px;\r\n    padding: 9px 10px !important;\r\n    outline: none !important;\r\n    border-radius: 4px !important;\r\n    resize: none !important;\r\n    line-height: 22px;\r\n    border: none;\r\n  }\r\n  & ul {\r\n    border: 1px solid lightgray;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    padding: 9px 10px;\r\n    background: white;\r\n    border-radius: 4px;\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const Toolbox = styled.div`\r\n  position: relative;\r\n  background: rgb(248, 248, 248);\r\n  height: 41px;\r\n  display: flex;\r\n  border-top: 1px solid rgb(221, 221, 221);\r\n  align-items: center;\r\n  border-bottom-left-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n`;\r\n\r\nexport const SendButton = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n`;\r\n\r\nexport const EachMention = styled.button<{ focus: boolean }>`\r\n  padding: 4px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  color: rgb(28, 29, 28);\r\n  width: 100%;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n  ${({ focus }) =>\r\n    focus &&\r\n    `\r\n    background: #1264a3;\r\n    color: white;\r\n  `};\r\n`;\r\n","import React, { VFC, useCallback, useEffect, useRef } from 'react';\r\nimport { ChatArea, MentionsTextarea, SendButton, Toolbox, Form, EachMention } from '@components/ChatBox/styles';\r\nimport autosize from 'autosize';\r\nimport { SuggestionDataItem, Mention } from 'react-mentions';\r\nimport { IUser } from '@typings/db';\r\nimport { useParams } from 'react-router';\r\nimport useSWR from 'swr';\r\nimport fetcher from '@utils/fetcher';\r\nimport gravatar from 'gravatar';\r\n\r\ninterface Props {\r\n  chat: string;\r\n  onSubmitForm: (e: any) => void;\r\n  onChangeChat: (e: any) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n\r\n  const {\r\n    data: userData,\r\n    error,\r\n    revalidate,\r\n    mutate,\r\n  } = useSWR<IUser | false>('/api/users', fetcher, { dedupingInterval: 2000 /* 2초 */ });\r\n\r\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\r\n\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      autosize(textareaRef.current);\r\n    }\r\n  }, []);\r\n\r\n  const onKeydownChat = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey) {\r\n          e.preventDefault();\r\n          onSubmitForm(e);\r\n        }\r\n      }\r\n    },\r\n    [onSubmitForm],\r\n  );\r\n\r\n  const renderSuggestion = useCallback(\r\n    (\r\n      suggestion: SuggestionDataItem,\r\n      search: string,\r\n      highlightedDisplay: React.ReactNode,\r\n      index: number,\r\n      focus: boolean,\r\n    ): React.ReactNode => {\r\n      if (!memberData) return;\r\n      return (\r\n        <EachMention focus={focus}>\r\n          <img\r\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\r\n            alt={memberData[index].nickname}\r\n          />\r\n          <span>{highlightedDisplay}</span>\r\n        </EachMention>\r\n      );\r\n    },\r\n    [memberData],\r\n  );\r\n\r\n  return (\r\n    <ChatArea>\r\n      <Form onSubmit={onSubmitForm}>\r\n        <MentionsTextarea\r\n          id=\"editor-chat\"\r\n          value={chat}\r\n          onChange={onChangeChat}\r\n          onKeyDown={onKeydownChat}\r\n          placeholder={placeholder}\r\n          inputRef={textareaRef}\r\n          forceSuggestionsAboveCursor\r\n        >\r\n          <Mention\r\n            appendSpaceOnAdd\r\n            trigger=\"@\"\r\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\r\n            renderSuggestion={renderSuggestion}\r\n          />\r\n        </MentionsTextarea>\r\n        <Toolbox>\r\n          <SendButton\r\n            className={\r\n              'c-button-unstyled c-icon_button c-icon_button--size_small c-wysiwyg_container__button c-wysiwyg_container__button--send' +\r\n              (chat?.trim() ? '' : ' c-wysiwyg_container__button--disabled c-button--disabled c-icon_button--default')\r\n            }\r\n            data-qa=\"texty_send_button\"\r\n            aria-label=\"Send message\"\r\n            data-sk=\"tooltip_parent\"\r\n            type=\"submit\"\r\n            disabled={!chat?.trim()}\r\n          >\r\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\r\n          </SendButton>\r\n        </Toolbox>\r\n      </Form>\r\n    </ChatArea>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatWrapper = styled.div`\r\n  display: flex;\r\n  padding: 8px 20px;\r\n  &:hover {\r\n    background: #eee;\r\n  }\r\n  & .chat-img {\r\n    display: flex;\r\n    width: 36px;\r\n    margin-right: 8px;\r\n    & img {\r\n      width: 36px;\r\n      height: 36px;\r\n    }\r\n  }\r\n`;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport React, { VFC, memo, useMemo } from 'react';\r\nimport { ChatWrapper } from '@components/Chat/styles';\r\nimport gravatar from 'gravatar';\r\nimport dayjs from 'dayjs';\r\nimport regexifyString from 'regexify-string';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: IDM | IChat;\r\n}\r\n\r\nconst Chat: VFC<Props> = ({ data }) => {\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const user = 'Sender' in data ? data.Sender : data.User;\r\n\r\n  const result = useMemo(\r\n    () =>\r\n      regexifyString({\r\n        input: data.content,\r\n        pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\r\n        decorator(match, index) {\r\n          const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\r\n          if (arr) {\r\n            return (\r\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\r\n                @{arr[1]}\r\n              </Link>\r\n            );\r\n          }\r\n          return <br key={index} />;\r\n        },\r\n      }),\r\n    [data.content],\r\n  );\r\n\r\n  return (\r\n    <ChatWrapper>\r\n      <div className=\"chat-img\">\r\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\r\n      </div>\r\n      <div className=\"chat-text\">\r\n        <div className=\"chat-user\">\r\n          <b>{user.nickname}</b>\r\n          <span> {dayjs(data.createdAt).format('h:mm A')}</span>\r\n        </div>\r\n        <p>{result}</p>\r\n      </div>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Chat);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatZone = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Section = styled.section`\r\n  margin-top: 20px;\r\n  border-top: 1px solid #eee;\r\n`;\r\n\r\nexport const StickyHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  position: sticky;\r\n  top: 14px;\r\n  & button {\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    height: 28px;\r\n    line-height: 27px;\r\n    padding: 0 16px;\r\n    z-index: 2;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\r\n    border-radius: 24px;\r\n    position: relative;\r\n    top: -13px;\r\n    background: white;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n","import Chat from '@components/Chat';\r\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\r\nimport { IDM, IChat } from '@typings/db';\r\nimport React, { useCallback, forwardRef, MutableRefObject } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\ninterface Props {\r\n  chatSections: { [key: string]: (IDM | IChat)[] };\r\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\r\n  isReachingEnd: boolean;\r\n}\r\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\r\n  const onScroll = useCallback(\r\n    (values) => {\r\n      if (values.scrollTop === 0 && !isReachingEnd) {\r\n        console.log('가장 위');\r\n        setSize((prevSize) => prevSize + 1).then(() => {\r\n          // 스크롤 위치 유지\r\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\r\n          if (current) {\r\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [scrollRef, isReachingEnd, setSize],\r\n  );\r\n\r\n  return (\r\n    <ChatZone>\r\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\r\n        {Object.entries(chatSections).map(([date, chats]) => {\r\n          return (\r\n            <Section className={`section-${date}`} key={date}>\r\n              <StickyHeader>\r\n                <button>{date}</button>\r\n              </StickyHeader>\r\n              {chats.map((chat) => (\r\n                <Chat key={chat.id} data={chat} />\r\n              ))}\r\n            </Section>\r\n          );\r\n        })}\r\n      </Scrollbars>\r\n    </ChatZone>\r\n  );\r\n});\r\n\r\nexport default ChatList;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport { Container, Header } from '@pages/DirectMessage/styles';\r\nimport { IDM } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport makeSection from '@utils/makeSection';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport gravatar from 'gravatar';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { useParams } from 'react-router';\r\nimport useSWR, { useSWRInfinite } from 'swr';\r\nimport useSocket from '@hooks/useSocket';\r\n\r\nconst DirectMessage = () => {\r\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\r\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\r\n  const { data: myData } = useSWR('/api/users', fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    revalidate,\r\n    setSize,\r\n  } = useSWRInfinite<IDM[]>(\r\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n  const [socket] = useSocket(workspace);\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(chat);\r\n      if (chat?.trim() && chatData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            SenderId: myData.id,\r\n            Sender: myData,\r\n            ReceiverId: userData.id,\r\n            Receiver: userData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          setChat('');\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            revalidate();\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, myData, userData, workspace, id],\r\n  );\r\n\r\n  const onMessage = useCallback((data: IDM) => {\r\n    // id는 상대방 아이디\r\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\r\n      mutateChat((chatData) => {\r\n        chatData?.[0].unshift(data);\r\n        return chatData;\r\n      }, false).then(() => {\r\n        if (scrollbarRef.current) {\r\n          if (\r\n            scrollbarRef.current.getScrollHeight() <\r\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n          ) {\r\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n            setTimeout(() => {\r\n              scrollbarRef.current?.scrollToBottom();\r\n            }, 50);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n    return () => {\r\n      socket?.off('dm', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  // 로딩 시 스크롤바 제일 아래로\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      setTimeout(() => {\r\n        scrollbarRef.current?.scrollToBottom();\r\n      }, 100);\r\n    }\r\n  }, [chatData]);\r\n\r\n  if (!userData || !myData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\r\n        <span>{userData.nickname}</span>\r\n      </Header>\r\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DirectMessage;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport dayjs from 'dayjs';\r\n\r\nexport default function makeSection(chatList: IDM[] | IChat[]) {\r\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\r\n  console.log(sections);\r\n\r\n  chatList.forEach((chat) => {\r\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\r\n    if (Array.isArray(sections[monthDate])) {\r\n      sections[monthDate].push(chat);\r\n    } else {\r\n      sections[monthDate] = [chat];\r\n    }\r\n  });\r\n\r\n  return sections;\r\n}\r\n"],"names":["ChatArea","styled","_templateObject","_taggedTemplateLiteral","Form","_templateObject2","MentionsTextarea","MentionsInput","_templateObject3","Toolbox","_templateObject4","SendButton","_templateObject5","EachMention","_templateObject6","_ref","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","_useSWR","useSWR","fetcher","dedupingInterval","userData","data","memberData","error","revalidate","mutate","concat","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","React","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","forceSuggestionsAboveCursor","Mention","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","Chat","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","Link","to","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","forwardRef","scrollRef","chatSections","setSize","isReachingEnd","onScroll","values","scrollTop","console","log","prevSize","then","getScrollHeight","scrollHeight","Scrollbars","autoHide","ref","onScrollFrame","Object","entries","_ref2","_ref3","date","chats","Container","Header","_chatData$","_chatData","_useParams","myData","_useInput2","_slicedToArray","useInput","setChat","_useSWRInfinite","useSWRInfinite","chatData","mutateChat","socket","useSocket","length","scrollbarRef","savedChat","prevChatData","_chatData$0$","unshift","SenderId","ReceiverId","Receiver","Date","_scrollbarRef$current","scrollToBottom","axios","catch","onMessage","Number","_scrollbarRef$current2","getClientHeight","getScrollTop","getValues","setTimeout","_scrollbarRef$current3","on","off","_scrollbarRef$current4","makeSection","flat","reverse","ChatList","ChatBox","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}