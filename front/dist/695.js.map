{"version":3,"file":"695.js","mappings":"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","sources":["webpack://sleact-ts-front/./hooks/useInput.ts","webpack://sleact-ts-front/./pages/LogIn/index.tsx","webpack://sleact-ts-front/./pages/SignUp/styles.tsx","webpack://sleact-ts-front/./utils/fetcher.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState, ChangeEvent } from 'react';\r\n\r\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\r\n\r\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\r\n  const [value, setValue] = useState(initialData);\r\n  const handler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value as unknown as T);\r\n  }, []);\r\n  return [value, handler, setValue];\r\n};\r\n\r\nexport default useInput;\r\n","import useInput from '@hooks/useInput';\r\nimport { Button, Error, Form, Header, Input, Label, LinkContainer } from '@pages/SignUp/styles';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\n\r\nconst LogIn = () => {\r\n  const { data: userData, error, revalidate, mutate } = useSWR('/api/users', fetcher);\r\n\r\n  const [logInError, setLogInError] = useState(false);\r\n  const [email, onChangeEmail] = useInput('');\r\n  const [password, onChangePassword] = useInput('');\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      setLogInError(false);\r\n      axios\r\n        .post(\r\n          '/api/users/login',\r\n          { email, password },\r\n          {\r\n            withCredentials: true,\r\n            // 쓰는 이유: 프론트 서버와 백엔드 서버의 주소가 다르기때문\r\n          },\r\n        )\r\n        .then((response) => {\r\n          revalidate();\r\n          // mutate(response.data, false);\r\n          // revalidate는 다시 요청을 하지만, mutate는 요청을 다시 보내는 것이 아니라 axios로 가져온 데이터는 data에 넣어준다.\r\n        })\r\n        .catch((error) => {\r\n          setLogInError(error.response?.data?.statusCode === 401);\r\n        });\r\n    },\r\n    [email, password],\r\n  );\r\n\r\n  if (userData === undefined) {\r\n    return <div>로딩중...</div>;\r\n  }\r\n\r\n  if (userData) {\r\n    return <Redirect to=\"/workspace/sleact/channel/일반\" />;\r\n  }\r\n\r\n  // console.log(error, userData);\r\n  // if (!error && userData) {\r\n  //   console.log('로그인됨', userData);\r\n  //   return <Redirect to=\"/workspace/sleact/channel/일반\" />;\r\n  // }\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <Header>Sleact</Header>\r\n      <Form onSubmit={onSubmit}>\r\n        <Label id=\"email-label\">\r\n          <span>이메일 주소</span>\r\n          <div>\r\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\r\n          </div>\r\n        </Label>\r\n        <Label id=\"password-label\">\r\n          <span>비밀번호</span>\r\n          <div>\r\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\r\n          </div>\r\n          {logInError && <Error>이메일과 비밀번호 조합이 일치하지 않습니다.</Error>}\r\n        </Label>\r\n        <Button type=\"submit\">로그인</Button>\r\n      </Form>\r\n      <LinkContainer>\r\n        아직 회원이 아니신가요?&nbsp;\r\n        <Link to=\"/signup\">회원가입 하러가기</Link>\r\n        {/* a태그 사용하면 화면 전환 시 새로고침 현상이 나타남 -> 그래서 Link 사용 */}\r\n      </LinkContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogIn;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Header = styled.header`\r\n  text-align: center;\r\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\r\n  font-weight: 700;\r\n  font-size: 48px;\r\n  line-height: 46px;\r\n  letter-spacing: -0.75px;\r\n  margin-top: 50px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  margin: 0 auto;\r\n  width: 400px;\r\n  max-width: 400px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 16px;\r\n  & > span {\r\n    display: block;\r\n    text-align: left;\r\n    padding-bottom: 8px;\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    line-height: 1.46666667;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  border-radius: 4px;\r\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\r\n  border: 1px solid var(--saf-0);\r\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px;\r\n  width: 100%;\r\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\r\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\r\n  padding: 12px;\r\n  height: 44px;\r\n  padding-top: 11px;\r\n  padding-bottom: 13px;\r\n  font-size: 18px;\r\n  line-height: 1.33333333;\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-bottom: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  color: #fff;\r\n  background-color: #4a154b;\r\n  border: none;\r\n  font-size: 18px;\r\n  font-weight: 900;\r\n  height: 44px;\r\n  min-width: 96px;\r\n  padding: 0 16px 3px;\r\n  transition: all 80ms linear;\r\n  user-select: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\r\n  &:hover {\r\n    background-color: rgba(74, 21, 75, 0.9);\r\n    border: none;\r\n  }\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Error = styled.div`\r\n  color: #e01e5a;\r\n  margin: 8px 0 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const Success = styled.div`\r\n  color: #2eb67d;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const LinkContainer = styled.p`\r\n  font-size: 13px;\r\n  color: #616061;\r\n  margin: 0 auto 8px;\r\n  width: 400px;\r\n  max-width: 400px;\r\n  & a {\r\n    color: #1264a3;\r\n    text-decoration: none;\r\n    font-weight: 700;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst fetcher = (url: string) =>\r\n  axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n    })\r\n    .then((response) => response.data); // fetcher를 활용하여 서버에서 받아 온 데이터를 가공하여 사용할 수 있다.\r\n\r\nexport default fetcher;\r\n"],"names":["initialData","_useState2","useState","value","setValue","useCallback","e","target","_useSWR","useSWR","fetcher","userData","data","revalidate","error","mutate","_slicedToArray","logInError","setLogInError","_useInput2","useInput","email","onChangeEmail","_useInput4","password","onChangePassword","onSubmit","preventDefault","axios","withCredentials","then","response","catch","_error$response","_error$response$data","statusCode","undefined","React","Redirect","to","id","Header","Form","Label","Input","type","name","onChange","Error","Button","LinkContainer","Link","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","Success","_templateObject7","_templateObject8","url"],"sourceRoot":""}